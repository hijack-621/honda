<script setup lang="ts">
import TWEEN from "@tweenjs/tween.js";
import { isUndefined } from 'lodash';
import { loadFbx } from '~/assets/utils/modelLoadFuncs'
import * as THREE from "three";
import { OrbitControls } from "~/assets/js/Controls";
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'
import { CSS2DRenderer, CSS2DObject, } from "three/examples/jsm/renderers/CSS2DRenderer.js";
import { ref, onMounted, getCurrentInstance } from "vue";
import { ElMessage, ElSelect, ElOption, ElProgress } from 'element-plus'
import { searchByParams } from '~/types/interface';
interface Lights {
  name: string,
  obj: THREE.AmbientLight | THREE.DirectionalLight | THREE.PointLight,
  position?: Array<number>,
  Helper?: THREE.PointLightHelper
}
const emit = defineEmits(['changeListBySN'])
const props = defineProps({
  model3dPropInfoData: Object,
  dataOnModel: Object,
  showInfo: Boolean
})
let timer: NodeJS.Timeout | null = null
let timer2: string | number | NodeJS.Timeout | undefined;
let { model3dPropInfoData, dataOnModel, showInfo } = toRefs(props);
let sum = ref(0)
const currentModel = ref('760B');
const modelPath = ref(`model/${currentModel.value}.fbx`);
let fov = 46;
let mixer: THREE.AnimationMixer;
let clock = new THREE.Clock()
const router = useRouter();
let sphere103: THREE.Object3D<THREE.Event> | THREE.Mesh<THREE.SphereGeometry, THREE.MeshLambertMaterial>, lineGeometry, line, raycaster: THREE.Raycaster, mouse: THREE.Vector2;
raycaster = new THREE.Raycaster();
mouse = new THREE.Vector2();
const { proxy } = getCurrentInstance() as any;
const num = ref(0);
const isShow = ref(1);
const info = ref("model loading...");
let renderAF = ref()
let scene = ref<THREE.Scene | null>()
let camera = ref();
const renderer = ref();
const labelRenderer = ref();
const controls = ref();
const server = "/api/measurePoint/getBySubModel"
const realData = ref()
let infos = ref();
infos.value = model3dPropInfoData!.value
const options = ref([
  {
    value: 'MB13',
    label: 'MB13',
  },
  // {
  //   value: 'MB02',
  //   label: 'MB02',
  // },
])
const value = ref("")
const onProgress = (xhr: any) => {
  num.value = Math.floor((xhr.loaded / xhr.total) * 100);
};
function addGrid() {
  // var mesh = new THREE.Mesh(new THREE.PlaneGeometry(200, 200), new THREE.MeshPhongMaterial({ color: 0xffffff, depthWrite: false }));
  // mesh.rotation.x = - Math.PI / 2;
  // mesh.receiveShadow = true;
  // scene.add(mesh);

  //添加地板割线
  var grid = new THREE.GridHelper(800, 200, 0xeeeeee, 0xeeeeee);
  grid.position.y = -6.5;
  grid.rotation.y = -Math.PI;
  grid.material.opacity = 0.2;
  grid.material.transparent = true;
  scene.value!.add(grid);
}
const deco = () => {
  const decorations = document.querySelectorAll('.decoration') as NodeListOf<HTMLElement>;
  [...decorations].forEach((v, i) => {
    if (i > 0) {
      v.style.right = `-${16 + 14 * i}%`
    }
    i > 2 ? v.style.opacity = `${1 * (1 - i * 0.1)}` : ''
  })
}
function removeTags() {
  const meshes = scene.value!.children.filter((o) => {
    return o.type == 'Line' || o.name == 'mesPoint';
  })
  meshes.forEach((l) => {
    l.remove(...l.children)
  })
  scene.value!.remove(...meshes);
}
async function initMP(p?: any, x?: string, y?: any) {
  removeTags()
  if (x == '优良') {
    await loadLabel()
  } else {
    await barLoadLabel()
  }
}
function getCurModel(curModel: string) {

  currentModel.value = curModel
  setTimeout(() => {
    getMesurePointsBySubModel({ 0: 'ws' })
  }, 600);
}
function changeModelByWs(modelName: any, stationName: any) {
  // 首先清除model
  const preModel = scene.value!.children.filter(v => { // 过滤出模型obj
    return v.name == 'AnimationRef';
  });
  if (preModel.length > 0) {
    const container = document.querySelector('#container')!;
    const canvas = document.querySelector('#container>canvas')!
    container.removeChild(canvas)
    setTimeout(() => {
      scene.value!.remove(...preModel) // 清除模型
      removeTags();
      clearCache()
      modelPath.value = `model/${modelName}.fbx`;
    }, 600);
  }
}
const initPrerequsites = () => {
  scene.value = new THREE.Scene()
  const element = document.getElementById("container")!;
  const Lights: Array<Lights> = [
    { name: 'AmbientLight', obj: new THREE.AmbientLight(0xcccccc, .35) },
    { name: 'DirectionalLight_top', obj: new THREE.DirectionalLight(0xcccccc, 0.8), position: [50, 50, 50] },
    { name: 'DirectionalLight_bottom', obj: new THREE.DirectionalLight(0xcccccc, 0.8), position: [0, -200, 0] },
    { name: 'DirectionalLight_right1', obj: new THREE.DirectionalLight(0xcccccc, 0.8), position: [0, -5, 20] },
    { name: 'DirectionalLight_right2', obj: new THREE.DirectionalLight(0xcccccc, 0.8), position: [0, -5, -20] },
  ];
  Lights.map(item => {
    item.obj.name = item.name;
    item.position && item.obj.position.set([...item.position][0], [...item.position][1], [...item.position][2]);
    item.Helper = new THREE.PointLightHelper(item.obj as any);
    scene.value!.add(item.obj);
  })
  //相机
  camera.value = new THREE.PerspectiveCamera(
    fov,
    window.innerWidth / window.innerHeight,
    0.1,
    1000
  );
  //-11.24, 7.88, 12.53 | -11.7,  7.0,  18.7 | last:-24.3, 2.9, 12.84
  camera.value.position.set(-24.3, 2.9, 12.84); // 设置相机位置
  camera.value.lookAt(new THREE.Vector3(0, 0, 0)); // 设置相机方向
  scene.value!.add(camera.value);
  // renderer 设置
  // const element = document.getElementById("container")!;
  renderer.value = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  renderer.value.setSize(element.clientWidth, element.clientHeight); // 设置渲染区域尺寸
  renderer.value.shadowMap.enabled = true; // 显示阴影
  renderer.value.shadowMap.type = THREE.PCFSoftShadowMap;
  // renderer.value.setClearColor(0x7D8690); // 设置背景颜色
  element.appendChild(renderer.value.domElement); // 这里是canvas
  labelRenderer.value = new CSS2DRenderer();
  labelRenderer.value.setSize(element.clientWidth, element.clientHeight);
  labelRenderer.value.domElement.style.position = "absolute";
  labelRenderer.value.domElement.style.top = "0px";
  labelRenderer.value.domElement.style.pointerEvents = 'auto'; // 这里设置为none，模型点击获取坐标就可以生效了，但是对于css2dobject的操作就被屏蔽了！！！
  element.appendChild(labelRenderer.value.domElement); // 这里domElement是 divlabel的父级
  // init 控制器
  controls.value = new OrbitControls(
    camera.value,
    labelRenderer.value.domElement
  );
  // copy中实例了两个控制对象, 经试验 只绑定labelRenderer_controls 也可以！！！，但是不能只绑定 controls ，这个就将controls 定义为 labelRenderer_controls
  showInfo.value && (controls.value.autoRotate = true)//    // 开启了自动旋转属性后，点位会产生些许偏移
  controls.value.minDistance = 15;
  controls.value.maxDistance = 30; // 这里控制可以缩放的最大最远距离，也就是放大缩小的比例
  renderer.value.domElement.removeAttribute('tabindex'); //  去除 点击模型出现白色边框
  labelRenderer.value.domElement.removeAttribute('tabindex'); //  去除 点击模型出现白色边框
  return new Promise((resolve) => {
    resolve(1)
  })
}
async function keyframeAni(object: THREE.Object3D) {
  const times = [0, 2];
  const rorateValues = [0, -Math.PI * 2];
  const Kf_duration = 2;
  const VKf_duration = 2.8
  // 关键帧轨道！！！
  const rotateTrack = new THREE.KeyframeTrack(
    'AnimationRef.rotation[y]',
    times,
    rorateValues
  );
  const { x, y, z } = object.position;
  const positionKF = new THREE.VectorKeyframeTrack('.position', [0, 1, 2], [x, y, z, x, y + 0.15, z, x, y, z]);

  const animations: [THREE.KeyframeTrack, THREE.VectorKeyframeTrack] = [rotateTrack, positionKF]
  //动画剪辑
  animations.forEach((ani, index) => { // animation 是系统特殊变量！！！
    if (index == 0) {
      const clip = new THREE.AnimationClip('modelRotation', Kf_duration, [ani]);
      //播放编辑好的关键帧动画
      // const gp = new THREE.Object3D(); // 用一个3d物体包裹模型，旋转3d物体已达到绕自身旋转的效果。failed
      // gp.position.set(0, 0, 0);
      // gp.add(object);
      mixer = new THREE.AnimationMixer(object);
      const animation = mixer.clipAction(clip);
      animation.setLoop(THREE.LoopOnce, 1) // 设置帧动画只播放一次！！！
      animation.timeScale = 1 //调节播放速度，默认1，0动画暂停，负数动画反方向执行。
      animation.play() //开始播放。
    } else {
      setTimeout(() => {
        if (sum.value > 2) {
          const clip = new THREE.AnimationClip('modelTranslateY', VKf_duration, [ani]);
          mixer = new THREE.AnimationMixer(object);
          const animation = mixer.clipAction(clip);
          animation.setLoop(THREE.LoopRepeat, Infinity) // 设置帧动画只播放一次！！！
          animation.timeScale = 1 //调节播放速度，默认1，0动画暂停，负数动画反方向执行。
          animation.play() //开始播放。
        }
      }, 2023);
    }
  })
}
/* 判断模型是否被移出相机可视区！！！ */

const render = () => {
  cancelAnimationFrame(renderAF.value)
  renderAF.value = requestAnimationFrame(render);
  renderer.value.render(toRaw(scene.value), camera.value);
  labelRenderer.value.render(toRaw(scene.value), camera.value);
  controls.value.update();
  TWEEN.update();
  // console.log(camera.value.position)
  //模型旋转动画
  if (mixer) {
    const t = clock.getDelta();
    sum.value += t;
    mixer.update(t)
  }
};
const barLoadLabel = async () => {
  var radius = 0.15,
    segemnt = 8,
    rings = 8;
  var sphereMaterial = new THREE.MeshLambertMaterial({ color: "#ECF0F1" });
  var material = new THREE.LineBasicMaterial({ color: 0x26a7f2 });
  realData.value.forEach(async (vv: { positionX: number; positionY: number; positionZ: number; pointId: number; }) => {
    if (((vv.positionX) != null || (vv.positionY) != null || (vv.positionZ) != null) && vv.pointId > 3) {
      const div = document.createElement("div");
      div.className = "myDiv";
      div.id = vv.pointId.toString();
      // div.style.pointerEvents = 'none';
      //div.style.cssText = 'display:flex !important; flex-dirextion:row !important; justify-content:center;align-items:center'
      div.innerHTML = `
                      <div class="tag"><span>X</span><span class="hidden">${(vv.positionX - 8).toFixed(1)}</span></div>
                      <div class="tag"><span>Y</span><span class="hidden">${(vv.positionY + 0.5).toFixed(1)}</span></div>
                      <div class="tag"><span>Z</span><span class="hidden">${(vv.positionZ + 5).toFixed(1)}</span></div>
                      `;
      const divLabel = new CSS2DObject(div);
      divLabel.name = 'object2dTag'
      divLabel.position.set(
        (vv.positionX - 8) - 8,
        (vv.positionY + 0.5) + 0.5,
        (vv.positionZ + 5) + 5
      );
      const begin = new THREE.Vector3((vv.positionX), (vv.positionY), (vv.positionZ));
      let end;
      end = new THREE.Vector3((vv.positionX), (vv.positionY), (vv.positionZ));
      // ball
      sphere103 = new THREE.Mesh(new THREE.SphereGeometry(radius, segemnt, rings), sphereMaterial);
      sphere103.name = "mesPoint";
      lineGeometry = new THREE.BufferGeometry(); //three.js 125 版本以上就废弃掉  目前支持的是 bufferGeometry
      lineGeometry.setFromPoints([begin, end]);
      line = new THREE.Line(lineGeometry, material); // line
      sphere103.position.set((vv.positionX), (vv.positionY), (vv.positionZ));
      line.add(divLabel);
      scene.value!.add(sphere103);
      scene.value!.add(line);
    }
  })
}
const judgeMPColor = (MP: number) => {
  if (Math.abs(MP) <= 0.3) {
    return 'well'
  } else if (0.3 < Math.abs(MP) && Math.abs(MP) <= 1) {
    return 'good'
  }
  else if (1 < Math.abs(MP) && Math.abs(MP) <= 1.5) {
    return 'bad'
  } else {
    return 'danger'
  }
}
const loadSTL = async (path?: string, modelName?: string, stationName?: string) => {
  isShow.value = 1;
  num.value = 0;
  await loadFbx(camera, FBXLoader, modelPath.value,
    scene.value!, [loadLabel], onProgress, isShow, num, info, keyframeAni, showInfo.value);
};
function setCoornidateByAzimuth(PM: string, xyz: { x: number | string, y: number | string, z: number | string }) {
  switch (PM.slice(4, 7)) {
    case 'FL':

      break;
    case 'FR':

      break;
    case 'BR':

      break;
    case 'BL':

      break;


    default:
      break;
  }
}
const loadLabel = async () => {
  var radius = 0.1,
    segemnt = 8,
    rings = 8;
  var sphereMaterial = new THREE.MeshLambertMaterial({ color: "#005281" });
  var material = new THREE.LineBasicMaterial({ color: 0x005281 });
  // 这里realdata 只是测点的位置，并不是测量数据
  realData.value.forEach(async (vv: { positionX: number; positionY: number; positionZ: number; pointId: number; name: string }, index: number) => {
    if (((vv.positionX) != null || (vv.positionY) != null || (vv.positionZ) != null)) {
      const MPdata = (dataOnModel!.value as unknown as Array<searchByParams>).filter((v: any, i) => {
        return v.productPrototypeFeature * 1 == vv.pointId * 1
      })
      if (MPdata.length > 0) {
        const div = document.createElement("div");
        div.className = "myDiv";
        div.style.pointerEvents = 'auto'
        div.id = vv.pointId.toString();
        div.addEventListener("pointerdown", (e) => {
          const id = ((e.target! as HTMLElement).parentNode! as HTMLElement).id
          router.push({ path: '/MPDetail', query: { XYZ: JSON.stringify({ x: MPdata[0].txObserDevia, y: MPdata[0].tyObserDevia, z: MPdata[0].tzObserDevia, id, curModel: currentModel.value, partName: MPdata[0].pointName, position: [(vv.positionX), (vv.positionY), (vv.positionZ)] }) } })
          // router.push({path:'/MPDetail', state:{id, curModel:currentModel.value,}}) // 使用state, 需要在history API 路由方式下，使用， 接收： history.state.params
        });
        const divLabel = new CSS2DObject(div);
        divLabel.name = 'object2dTag'
        /* 这里对坐标的操作是由于模型的位置变了，所以标签坐标也需要跟着改变 */
        divLabel.position.set(
          (vv.positionX) * 1.3 + (index * 0.01),
          (vv.positionY),
          (vv.positionZ) * 1.1 + (index * 0.001)
        );
        const begin = new THREE.Vector3((vv.positionX), (vv.positionY), (vv.positionZ));
        let end;
        end = new THREE.Vector3(
          (vv.positionX) * 1.3 + (index * 0.01),
          (vv.positionY),
          (vv.positionZ) * 1.1 + (index * 0.001)
        );
        sphere103 = new THREE.Mesh( // ball
          new THREE.SphereGeometry(radius, segemnt, rings),
          sphereMaterial
        );
        sphere103.name = "mesPoint";
        lineGeometry = new THREE.BufferGeometry(); //three.js 125 版本以上就废弃掉  目前支持的是 bufferGeometry
        lineGeometry.setFromPoints([begin, end]);
        line = new THREE.Line(lineGeometry, material); // line
        sphere103.position.set((vv.positionX), (vv.positionY), (vv.positionZ));
        sphere103.renderOrder = 1
        line.add(divLabel);
        scene.value!.add(sphere103);
        scene.value!.add(line);
        div.innerHTML = `
                      <div class="PM">${MPdata[0].pointName}</div>
                      <div title=${MPdata[0].pointName} class="tag ${judgeMPColor(MPdata[0].txObserDevia as number)}" id=${vv.pointId}><span>X</span><span class="hidden">${(MPdata[0].txObserDevia as number).toFixed(2)}</span></div>
                      <div title=${MPdata[0].pointName} class="tag ${judgeMPColor(MPdata[0].tyObserDevia as number)}" id=${vv.pointId}><span>Y</span><span class="hidden">${(MPdata[0].tyObserDevia as number).toFixed(2)}</span></div>
                      <div title=${MPdata[0].pointName} class="tag ${judgeMPColor(MPdata[0].tzObserDevia as number)}" id=${vv.pointId}><span>Z</span><span class="hidden">${(MPdata[0].tzObserDevia as number).toFixed(2)}</span></div>
                      `;
      }
    }
  })
}
const bindEvents = () => {
  labelRenderer.value.domElement.addEventListener("mouseenter", (event: { preventDefault: () => void }) => {
    event.preventDefault();
    controls.value.autoRotate = false;
    if (scene.value?.children.filter(v => {
      return v.type == 'Group' && v.name == "AnimationRef"
    }).length > 0) {
      loadLabel()
    }
  });
  labelRenderer.value.domElement.addEventListener("mouseleave", (event: { preventDefault: () => void }) => {
    event.preventDefault();
    removeTags()
    if (timer) timer = null
    timer = setTimeout(() => {
      controls.value.autoRotate = true;
    }, 9999);
  });
};
function judgeModelPosition(model: THREE.Object3D<THREE.Event>) {
  let vector = new THREE.Vector3(model.position.x, model.position.y, model.position.z)
  let tempV = vector.applyMatrix4(camera.value.matrixWorldInverse).applyMatrix4(camera.value.projectionMatrix);
  if ((Math.abs(tempV.x) > 1) || (Math.abs(tempV.y) > 1) || (Math.abs(tempV.z) > 1)) {
    if (isUndefined(controls.value.autoRotate) || controls.value.autoRotate == false) {
      ElMessage('模型暂不可见,将恢复原视图!')
      controls.value.reset()
    }

  } else {
    console.log('in')
  }
}
const timerOfModelView = () => {
  timer2 = setInterval(() => {
    let model = scene.value?.children.filter(v => {
      return v.name == "AnimationRef" && v.type == 'Group'
    })!
    if (model.length == 1) {
      judgeModelPosition(model[0])
    }
  }, 2500)
}
const init = async (flag?: undefined) => {
  initPrerequsites().then((v) => {
    render()
  })
  await loadSTL(); // 加载STL模型
  showInfo.value && bindEvents()
  addGrid()
  // bindEvents();
  deco()
};
function barClicked(p: any, x: any, y: any) { // 传入 点击的柱子整个参数，以及对应x y 轴值
  initMP(p, x, y)
}
function getMesurePointsBySubModel(flag?: { 0: string; } | undefined) { // 获得模型上测点位置
  value.value = 'MB13'
  const res0 = proxy.$http.get(server, {
    params: {
      subModel: currentModel.value
    },
    headers: {
      token: localStorage.getItem('token')
    }
  }).then((v: { status: number; data: any; }) => {
    if (v.status == 200) {
      realData.value = v.data; // 模型上测量点位置;
      if (isUndefined(flag)) {
        init()
      } else {
        init(flag);
      }
    } else if (v.status == 401) {
      ElMessage('请登录后在操作！');
      router.push('/login')
      return;
    }
  }).catch((e: any) => {
    ElMessage('请登录后在操作！');
    router.push('/login')
    return;
  })
}
/**animateCamera()
 * current1 相机当前的位置 target1 相机的目标位置
 * target1 相机的目标位置
 * current2 当前的controls的target
 * target2 新的controls的target
 * */
async function animateCamera(current1: { x: any; y: any; z: any; }, target1: { x: any; y: any; z: any; }, current2: { x: any; y: any; z: any; }, target2: { x: any; y: any; z: any; }) {
  // console.log(current1, target1, current2, target2)
  var tween = new TWEEN.Tween({
    x1: current1.x, // 相机当前位置x
    y1: current1.y, // 相机当前位置y
    z1: current1.z, // 相机当前位置z
    x2: current2.x, // 控制当前的中心点x
    y2: current2.y, // 控制当前的中心点y
    z2: current2.z, // 控制当前的中心点z
  });
  tween.to(
    {
      x1: target1.x, // 新的相机位置x
      y1: target1.y, // 新的相机位置y
      z1: target1.z, // 新的相机位置z
      x2: target2.x, // 新的控制中心点位置x
      y2: target2.y, // 新的控制中心点位置x
      z2: target2.z, // 新的控制中心点位置x
    },
    3500
  );
  tween.onUpdate(function (object) {
    // console.log(object)
    // camera.value.lookAt(target1.x,target1.y,target1.z)
    camera.value.position.x = object.x1;
    camera.value.position.y = object.y1;
    camera.value.position.z = object.z1;
    controls.value.target.x = object.x2;
    controls.value.target.y = object.y2;
    controls.value.target.z = object.z2;
    controls.value.update();
  });
  tween.easing(TWEEN.Easing.Cubic.InOut);
  tween.start();
}
function getCameraAndControl() {
  return { camera: camera.value, control: toRaw(controls.value) }
}
function addLabelByRouteQuery(position: Array<number>, MPName: string) {
  var radius = .1,
    segemnt = 8,
    rings = 8;
  var sphereMaterial = new THREE.MeshLambertMaterial({ color: "#005281" });
  sphere103 = new THREE.Mesh( // ball
    new THREE.SphereGeometry(radius, segemnt, rings),
    sphereMaterial
  );
  var textureLoader = new THREE.TextureLoader();
  // 加载贴图
  var texture = textureLoader.load("/public/image/t2.png");
  // 点精灵材质
  var spriteMaterial = new THREE.SpriteMaterial({
    map: texture,//贴图
    color: 0xffff00,
    blending: THREE.AdditiveBlending,//在使用此材质显示对象时要使用何种混合。加法
  });
  var sprite = new THREE.Sprite(spriteMaterial);
  // 发光范围
  sprite.scale.set(1, 1, 1);
  sphere103.add(sprite);
  // selectedObjects.push(sphere103)
  // outlineObj(selectedObjects)
  sphere103.name = "mesPoint";
  sphere103.position.set(position[0], position[1], position[2]);
  sphere103.renderOrder = 1
  scene.value!.add(sphere103);
}
defineExpose({ barClicked, changeModelByWs, getCurModel, animateCamera, getCameraAndControl, addLabelByRouteQuery })
onMounted(async () => {
  setTimeout(() => {
    value.value = 'MB13'
    timerOfModelView()
  }, 50);
  getMesurePointsBySubModel()
});
function clearCache() {
  cancelAnimationFrame(renderAF.value)
  scene.value!.clear()
  scene.value = null
  camera.value = null
  controls.value = null
  renderer.value.dispose()
  renderer.value.forceContextLoss();
  renderer.value.context = null;
  renderer.value.domElement = null;
  renderer.value = null;
  labelRenderer.value.domElement = null;
  labelRenderer.value = null;
}
onUnmounted(() => { // 网页离开的
  clearCache()
  clearInterval(timer2)
})
</script>
<template>
  <div>
    <div class="main w-full h-full relative" ref="container" id="container">
      <!-- isshow here -->
      <div class="progress" v-show="isShow">
        <el-progress :text-inside="true" :stroke-width="24" :percentage="num" status="success" />
        <div class="progressInfo">{{ info }}</div>
      </div>

      <!-- <div v-show="showInfo" class="model3d-title z-[99999] absolute top-3 left-3">
                          <span class="ml-4 font-black italic  text-white text-sm">白车身3D测量点位一览</span>
                          <div class="productInfo  flex flex-col justify-around  mt-3">
                            <div class="productInfoItem relative flex flex-row justify-around  items-center w-full" v-for="(v, i) in infos"
                              :key="i">
                              <div class="pKey w-1/3 text-slate-400 text-xs">{{ v.key }}</div>
                              <div class="pValue mr-auto flex-1 text-sm">
                                 <el-select @change="changeSN" v-if="v.key == 'MB主线'" v-model="v.val" class="ml-6 w-[43%] z-[9999] "
                                                placeholder="Select" size="small">
                                                <el-option class="text-amber-600" v-for="item in SNOptions" :key="item.value" :label="item.label"
                                                  :value="item.value">
                                                </el-option>
                                              </el-select> 
                                <span>{{ v.val }}</span>
                              </div>
                            </div>
                          </div>
                           <div class="decoration" v-for="(v, i) in 9" :key="i"></div> 
                        </div> -->

      <div v-if="showInfo" class="model3d-modelSel absolute top-6 right-14 w-[215px] bg-[#001025] border-[#01122b]-50">
        <span class="text-white mr-2">当前工位:</span>
        <el-select v-model="value" class="my-2 w-[33%] z-[9999] " placeholder="Select" size="small">
          <el-option class="" v-for="item in options" :key="item.value" :label="item.label" :value="item.value">
          </el-option>
        </el-select>
      </div>
    </div>
  </div>
</template>
<style lang="less" scoped>
.progress {
  position: absolute;
  left: 50%;
  top: 10px;
  width: 350px;
  transform: translateX(-50%);
  z-index: 9999;

  .progressInfo {
    color: #fff; // color:#1f3b6f
    text-align: center;
    margin-top: 5px;
  }
}

.el-select {
  & :deep(.el-input__wrapper) {
    background-color: rgba(0, 0, 0, 0) !important;
    box-shadow: none !important;
    border: none !important;

    &:focus {
      border: none !important;
    }

    &:focus-visible {
      border: none !important;
      outline: none !important;
    }

    &>input {
      color: #efecec !important;
      font-weight: bolder !important;
      border: none !important;
    }
  }
}

.model3d-title {
  .productInfo {
    width: 240px;
    height: 423px;
    background-image: url(../assets/images/u809.png);

    .productInfoItem {
      border-bottom: none !important;

      .pValue {
        font-family: "Arial Normal", Arial, sans-serif;
      }

      &:not(&:last-of-type)::before {
        content: '';
        position: absolute;
        left: 18px;
        top: auto;
        bottom: -24px;
        right: 18px;
        height: 1px;
        width: calc(100%- 36px);
        background-color: #052E61;
      }

      &::after {
        content: '';
        position: absolute;
      }
    }
  }

  text-align: center;
  padding: 13px 23px;
  color: white;
  perspective: 800px;

  &::before {
    content: '';
    position: absolute;
    top: 21px;
    left: 15px;
    width: 8px;
    height: 8px;
    background: rgba(242, 242, 242, 1);
    // border: 1px solid #52c8f6;
    // transform: skew(-45deg);
  }

  &::after {
    content: '';
    position: absolute;
    top: 18px;
    left: 18px;
    width: 8px;
    height: 8px;
    background: rgba(242, 242, 242, .6);
  }

  .decoration {
    content: '';
    width: 16px;
    height: 13px;
    position: absolute;
    top: 50%;
    background: rgba(103, 133, 143, 1);
    transform: translateY(-50%) skew(-45deg);
    right: -16%;
  }
}

:deep(.el-message-box__message) {
  p {
    line-height: 26px !important;
  }

  .inputBox {
    display: flex !important;
    justify-content: space-between !important;

    input {
      box-shadow: rgb(220, 223, 230) 0px 0px 0;
      outline: none;
      border: 1px solid #39393a;
      border-radius: 3px;
    }
  }
}

.el-message-box__message {
  p {
    line-height: 26px !important;
  }

  .inputBox {
    display: flex !important;
    justify-content: space-between !important;

    input {
      box-shadow: rgb(220, 223, 230) 0px 0px 0;
      outline: none;
      border: 1px solid #39393a;
      border-radius: 3px;
    }
  }
}

.el-button--primary {
  color: #111 !important;
}

.tag {
  background: rgba(38, 20, 16, .99);
  border: 1px solid #00a4ff !important;
  color: #ffffff;
  width: 25px;
  height: 25px;
  font-size: 14px;
  line-height: 25px;
  text-align: center;
  border-radius: 3px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.myDiv {
  display: flex !important;
  flex-direction: row !important;
  justify-content: center;
  align-items: center;
  cursor: pointer;

  &:hover {
    &>.tag>span {
      display: inline-block !important;
    }
  }
}
</style>